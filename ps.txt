# Set-Alias -Name 'pi' -value "C:/Program Files/server.ps1" # Connect to ras-pi
Set-Alias -Name 'kali' -value "C:/Program Files/kali.ps1"
Set-Alias -Name 'nano' -Value 'C:\Program Files\Notepad++\notepad++.exe'
Set-Alias -Name 'new-exp'  -Value 'C:/Program Files/basic_express_js.ps1'
Set-Alias -Name 'new-node' -Value 'C:/Program Files/new_node_project.ps1'
Set-Alias -Name 'new-bs' -Value 'C:/Program Files/new_bs_scraper.ps1'
Set-Alias -Name 'new-py' -Value 'C:/Program Files/new_py_project.ps1'
Set-Alias -Name 'py-log' -Value 'C:/Program Files/logger_decorator.ps1'
Set-Alias -Name 'sort-dir' -Value 'C:/Program Files/sort_files_lite.ps1'
Set-Alias -Name 'git-i' -Value 'C:/Program Files/gitignore.ps1'
Set-Alias -Name 'server' -Value 'C:/Program Files/ubuntu-server.ps1'
Set-Alias -Name 'touch' -Value 'New-Item -ItemType File'  # Create a new empty file
Set-Alias -Name 'less' -Value 'Out-Host -Paging'  # View output one screen at a time
Set-Alias -Name 'head' -Value 'Get-Content -TotalCount 10'  # Output the first part of files
Set-Alias -Name 'tail' -Value 'Get-Content -Tail 10'  # Output the last part of files
Set-Alias -Name 'ps' -Value 'Get-Process'  # Report a snapshot of the current processes
Set-Alias -Name 'top' -Value 'Get-Process | Sort-Object CPU -Descending'  # Display and update sorted information about Set-Alias -Name 'du' -Value 'Get-ChildItem -Recurse | Measure-Object -Property Length -Sum'  # Estimate file space usage
Set-Alias -Name 'df' -Value 'Get-PSDrive'  # Report file system disk space usage
Set-Alias -Name 'find' -Value 'Get-ChildItem -Recurse'  # Search for files in a directory hierarchy
Set-Alias -Name 'grep' -Value 'Select-String'  # Print lines matching a pattern
Set-Alias -Name 'py' -Value 'python'


function Append-Gitignore {
    param(
        [Parameter(Mandatory=$true)][string]$Value,
        [string]$Path = (Get-Location)
    )

    $gitignoreFile = Join-Path -Path $Path -ChildPath ".gitignore"

    if (Test-Path -Path $gitignoreFile) {
        $content = Get-Content -Path $gitignoreFile
        if ($content -notcontains $Value) {
            Add-Content -Path $gitignoreFile -Value $Value
            Write-Output "Added value to existing .gitignore file."
        } else {
            Write-Output "Value already exists in .gitignore file."
        }
    } else {
        New-Item -Path $gitignoreFile -ItemType File
        Add-Content -Path $gitignoreFile -Value $Value
        Write-Output "Created .gitignore file and added value."
    }
}

function Create-Venv {
	python -m virtualenv .venv
	Append-Gitignore '.venv'
}

Set-Alias -Name 'venv' -Value 'Create-Venv'
Set-Alias -Name 'ga' -Value 'Append-Gitignore'

function Go-LocalRepository {
	Set-Location -Path 'F:\Local_Repository'
}
Set-Alias -Name 'lrp' -Value 'Go-LocalRepository'


function Go-Documents {
	Set-Location -Path 'C:/Users/willm/Documents'
}
Set-Alias -Name 'doc' -Value Go-Documents


function Go-Desktop {
	Set-Location -Path 'C:/Users/willm/Desktop'
}
Set-Alias -Name 'dsk' -Value Go-Desktop


function Go-Home {
	Set-Location -Path 'C:/Users/willm'
}
Set-Alias -Name '~' -Value Go-Home


function Back-One {
	& 'cd' '../'
}
Set-Alias -Name '..' -Value 'Back-One'


function Back-Two {
	& 'cd' '../../'
}
Set-Alias -Name '...' -Value 'Back-Two'


function Edit-Alias {
    & 'C:\Program Files\Notepad++\notepad++.exe' 'C:/Program Files/PowerShell/7/Profile.ps1'
}

Set-Alias -Name 'edal' -Value 'Edit-Alias'

function Add-Path {
    param(
        [string]$Path = (Get-Location)
    )

    # Normalize the path
    $Path = (Resolve-Path $Path).Path

    # Check if the path exists
    if (!(Test-Path $Path)) {
        Write-Output "Path does not exist: $Path"
        return
    }

    # Get the current user PATH
    $userPath = [Environment]::GetEnvironmentVariable('Path', 'User')

    # Check if the path is already in the PATH
    if ($userPath -split ';' -contains $Path) {
        Write-Output "Path is already in PATH: $Path"
        return
    }

    # Add the path to the user PATH
    $newUserPath = $userPath + ';' + $Path
    [Environment]::SetEnvironmentVariable('Path', $newUserPath, 'User')

    Write-Output "Path added to PATH: $Path"
}

Set-Alias -Name 'addpath' -Value 'Add-Path'

function New-Commit {
	param(
	[string] $message
	)

	git stage .
	git commit -a -m $message
	Write-Output 'Created new commit on current branch'
	Write-Output 'Message: $message'
	git push
}

Set-Alias -Name 'commit' -Value New-Commit

function Activate-Venv {
    # Check for 'venv' directory
    if (Test-Path -Path "venv") {
        $venv = "venv"
    }
    # Check for '.venv' directory if 'venv' is not found
    elseif (Test-Path -Path ".venv") {
        $venv = ".venv"
    }
    else {
        Write-Output "Neither 'venv' nor '.venv' directory found in current location."
        return
    }

    # Check for activate.ps1 script and execute it
    $activateScript = "${PWD}/$venv/Scripts/activate.ps1"
    if (Test-Path -Path $activateScript) {
        . $activateScript
    }
    else {
        Write-Output "'activate.ps1' script not found in $venv/Scripts/."
    }
}

Activate-Venv

function Auto-NpmInstall {
    # Check for 'package.json' file
    if (Test-Path -Path "package.json") {
        Write-Host "Found 'package.json'. Running 'npm install'..."
        npm install
        if ($LASTEXITCODE -eq 0) {
            Write-Host "'npm install' completed successfully." -ForegroundColor Green
        }
        else {
            Write-Output "'npm install' encountered an error."
        }
    }
    else {
        Write-Output "No 'package.json' found in current directory."
    }
}

Auto-NpmInstall

function Goto-Webaxs {
	& 'cd' '\\LS220D1C8\webaxs'
}

New-Alias -Name 'axs' -value 'Goto-Webaxs'

function Goto-Bfly {
	& 'cd' '\\LS220D1C8\bfly'
}

New-Alias -Name 'bfly' -value 'Goto-Bfly'


Write-Output 'Created Aliases for commands: pi, kali, py-log, sort-dir, git-i, new-[exp, node, bs, py]'
